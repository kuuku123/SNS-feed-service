server:
  port: 8300
spring:
    datasource:
        url: jdbc:mysql://192.168.14.74:3306/test?allowPublicKeyRetrieval=true&serverTimezone=UTC&useLegacyDatetimeCode=false
#        url: jdbc:mysql://localhost:3307/test?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#        url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/test?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
        username: root
        password: 1234

    jpa:
        show-sql: true
        hibernate:
            ddl-auto: create
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 722207403915-h1e331ulgs1u14c86abvvspd7t26eu8d.apps.googleusercontent.com
              clientSecret: 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
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 375795674485993
              clientSecret: 051992719b3ac2094b0d23389424e1a0
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
            github:
              clientId: d3e47fc2ddd966fa4352
              clientSecret: 3bc0f6b8332f93076354c2a5bada2f5a05aea60d
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - user:email
                - read:user
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080,http:localhost:8300
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - http://localhost:8080/oauth2/redirect
      - http://localhost:8300/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect